---
--- 相关resty.mysql使用参考<a>https://gitcode.net/mirrors/openresty/lua-resty-mysql?utm_source=csdn_github_accelerator</a>
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by huang.
--- DateTime: 16/09/2023 11:02
---
ngx.header.content_type = "application/json;charset=utf8"
--- 读取mysql数据到redis
--- 获取mysql类库
local mysql = require "resty.mysql"
--- 序列化lua对象
local cjson = require "cjson"

--- 获取uri参数
local uri_args = ngx.req.get_uri_args()
local id = uri_args["id"]

--- 先从mysql查询数据
local db = mysql:new()
-- 本地调用需要不止一秒，如果时间过短 会报failed to receive packet header: timeout:nil nil
--db:set_timeout(1000)
local props = {
    host = "192.168.220.110",
    -- 注意端口需要的数值类型，不要加引号，否则连接不上
    -- 报错1：connect() failed (111: Connection refused)
    -- 报错2：attempt to send data on a closed socket: u:00007F26EB4E3098, c:0000000000000000, ft:0 eof:0
    port = 3306,
    database = "legou",
    user = "root",
    password = "root"
}

local ok, err, errcode, sqlstate = db:connect(props)

if not ok then
    ngx.log(ngx.ERR, "hh-------------->failed to connect:", err, ":", errcode, " ", sqlstate)
    return ngx.exit(500)
end

local select_sql = "select id_, is_parent_, order_, parent_id_, title_, expand_ from category_ where id_ = " .. id

res, err, errcode, sqlstate = db:query(select_sql)

if not res then
    ngx.log(ngx.ERR, "hh-------------->bad result #1: ", err, ": ", errcode, ": ", sqlstate, ".")
    return ngx.exit(500)
end

ngx.say("result #1", cjson.encode(res))

db:close()

--- 存数据到redis
---获取redis类库
local redis = require("resty.redis")
local red = redis:new()
red:set_timeout(2000)

local ip = "192.168.220.110"
-- 注意端口需要的是数值类型，不要引号
local port = 6379
red:connect(ip, port)
red:set("content_" .. id, cjson.encode(res))
red.close()

--- nginx 返回消息，页面可以直接显示
ngx.say("{flag:true}")
